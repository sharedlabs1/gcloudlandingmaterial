# variables.tf for Lab 17: Network Connectivity Center Implementation
# Generated by Copilot

variable "project_id" {
  description = "The GCP project ID where resources will be created"
  type        = string
}

variable "region" {
  description = "The GCP region for resources"
  type        = string
  default     = "us-central1"
}

variable "zone" {
  description = "The GCP zone for zonal resources"
  type        = string
  default     = "us-central1-a"
}

variable "required_apis" {
  description = "List of APIs to enable for Network Connectivity Center"
  type        = list(string)
  default = [
    "networkconnectivity.googleapis.com",
    "compute.googleapis.com",
    "logging.googleapis.com",
    "monitoring.googleapis.com",
    "iam.googleapis.com",
    "cloudresourcemanager.googleapis.com"
  ]
}

variable "create_ncc_hub" {
  description = "Whether to create a new Network Connectivity Center hub"
  type        = bool
  default     = true
}

variable "ncc_hub_name" {
  description = "Name for the Network Connectivity Center hub"
  type        = string
  default     = "ncc-hub"
}

variable "hub_description" {
  description = "Description for the Network Connectivity Center hub"
  type        = string
  default     = "Network Connectivity Center hub for centralized connectivity"
}

variable "hub_labels" {
  description = "Labels to apply to the NCC hub"
  type        = map(string)
  default = {
    environment = "production"
    lab         = "lab-17"
    managed-by  = "terraform"
  }
}

variable "existing_hub_id" {
  description = "ID of existing NCC hub (if not creating new one)"
  type        = string
  default     = ""
}

variable "existing_spoke_networks" {
  description = "List of existing VPC network names to connect as spokes"
  type        = list(string)
  default     = []
}

variable "create_sample_spokes" {
  description = "Whether to create sample spoke networks"
  type        = bool
  default     = false
}

variable "sample_spoke_configs" {
  description = "Configuration for sample spoke networks"
  type = list(object({
    name            = string
    subnet_cidr     = string
    secondary_ranges = list(object({
      range_name    = string
      ip_cidr_range = string
    }))
  }))
  default = [
    {
      name        = "spoke-network-1"
      subnet_cidr = "10.1.0.0/24"
      secondary_ranges = []
    },
    {
      name        = "spoke-network-2"
      subnet_cidr = "10.2.0.0/24"
      secondary_ranges = []
    }
  ]
}

variable "enable_global_routing" {
  description = "Enable global routing for VPC networks"
  type        = bool
  default     = true
}

variable "enable_private_google_access" {
  description = "Enable private Google access for subnets"
  type        = bool
  default     = true
}

variable "enable_nat_logging" {
  description = "Enable logging for Cloud NAT"
  type        = bool
  default     = true
}

variable "exclude_export_ranges" {
  description = "IP ranges to exclude from export in spoke attachments"
  type        = list(string)
  default     = []
}

variable "spoke_labels" {
  description = "Labels to apply to NCC spokes"
  type        = map(string)
  default = {
    environment = "production"
    lab         = "lab-17"
    managed-by  = "terraform"
  }
}

variable "allowed_ip_ranges" {
  description = "IP ranges allowed for inter-spoke communication"
  type        = list(string)
  default     = ["10.0.0.0/8", "172.16.0.0/12"]
}

variable "allowed_tcp_ports" {
  description = "TCP ports allowed for inter-spoke communication"
  type        = list(string)
  default     = ["22", "80", "443", "8080"]
}

variable "allowed_udp_ports" {
  description = "UDP ports allowed for inter-spoke communication"
  type        = list(string)
  default     = ["53", "123"]
}

variable "network_tags" {
  description = "Network tags to apply to firewall rules"
  type        = list(string)
  default     = ["ncc-spoke", "inter-spoke"]
}

variable "custom_firewall_rules" {
  description = "Custom firewall rules to create"
  type = list(object({
    name               = string
    network            = string
    priority           = number
    source_ranges      = list(string)
    destination_ranges = list(string)
    source_tags        = list(string)
    target_tags        = list(string)
    allow_rules = list(object({
      protocol = string
      ports    = list(string)
    }))
    deny_rules = list(object({
      protocol = string
      ports    = list(string)
    }))
  }))
  default = []
}

variable "ncc_admin_members" {
  description = "List of members to grant NCC admin roles"
  type        = list(string)
  default     = []
}

variable "ncc_viewer_members" {
  description = "List of members to grant NCC viewer roles"
  type        = list(string)
  default     = []
}

variable "enable_monitoring" {
  description = "Enable monitoring and alerting for NCC"
  type        = bool
  default     = false
}

variable "notification_channels" {
  description = "Notification channels for monitoring alerts"
  type        = list(string)
  default     = []
}

variable "resource_labels" {
  description = "Labels to apply to all resources"
  type        = map(string)
  default = {
    environment = "production"
    lab         = "lab-17"
    managed-by  = "terraform"
    service     = "network-connectivity-center"
  }
}

variable "enable_flow_logs" {
  description = "Enable VPC Flow Logs for spoke networks"
  type        = bool
  default     = false
}

variable "flow_logs_config" {
  description = "Configuration for VPC Flow Logs"
  type = object({
    aggregation_interval = string
    flow_sampling        = number
    metadata             = string
  })
  default = {
    aggregation_interval = "INTERVAL_5_SEC"
    flow_sampling        = 0.5
    metadata             = "INCLUDE_ALL_METADATA"
  }
}

variable "peering_config" {
  description = "Configuration for VPC peering connections"
  type = object({
    auto_create_routes                = bool
    import_custom_routes             = bool
    export_custom_routes             = bool
    import_subnet_routes_with_public_ip = bool
    export_subnet_routes_with_public_ip = bool
  })
  default = {
    auto_create_routes                = true
    import_custom_routes             = true
    export_custom_routes             = true
    import_subnet_routes_with_public_ip = false
    export_subnet_routes_with_public_ip = false
  }
}
