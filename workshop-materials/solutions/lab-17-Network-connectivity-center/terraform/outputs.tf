# outputs.tf for Lab 17: Network Connectivity Center Implementation
# Generated by Copilot

output "project_id" {
  description = "The GCP project ID"
  value       = var.project_id
}

output "ncc_hub_id" {
  description = "ID of the Network Connectivity Center hub"
  value       = var.create_ncc_hub ? google_network_connectivity_hub.ncc_hub[0].id : var.existing_hub_id
}

output "ncc_hub_name" {
  description = "Name of the Network Connectivity Center hub"
  value       = var.create_ncc_hub ? google_network_connectivity_hub.ncc_hub[0].name : "existing-hub"
}

output "ncc_hub_uri" {
  description = "URI of the Network Connectivity Center hub"
  value       = var.create_ncc_hub ? google_network_connectivity_hub.ncc_hub[0].routing_vpcs : null
}

output "spoke_networks" {
  description = "Information about created spoke networks"
  value = var.create_sample_spokes ? {
    for i, config in var.sample_spoke_configs : config.name => {
      network_id       = google_compute_network.spoke_networks[i].id
      network_name     = google_compute_network.spoke_networks[i].name
      network_self_link = google_compute_network.spoke_networks[i].self_link
      subnet_id        = google_compute_subnetwork.spoke_subnets[i].id
      subnet_name      = google_compute_subnetwork.spoke_subnets[i].name
      subnet_cidr      = google_compute_subnetwork.spoke_subnets[i].ip_cidr_range
      subnet_self_link = google_compute_subnetwork.spoke_subnets[i].self_link
    }
  } : {}
}

output "existing_spokes" {
  description = "Information about existing network spokes"
  value = {
    for i, network in var.existing_spoke_networks : network => {
      spoke_id   = google_network_connectivity_spoke.existing_spokes[i].id
      spoke_name = google_network_connectivity_spoke.existing_spokes[i].name
      spoke_uri  = google_network_connectivity_spoke.existing_spokes[i].unique_id
      hub_id     = google_network_connectivity_spoke.existing_spokes[i].hub
    }
  }
}

output "sample_spokes" {
  description = "Information about sample network spokes"
  value = var.create_sample_spokes ? {
    for i, config in var.sample_spoke_configs : config.name => {
      spoke_id   = google_network_connectivity_spoke.sample_spokes[i].id
      spoke_name = google_network_connectivity_spoke.sample_spokes[i].name
      spoke_uri  = google_network_connectivity_spoke.sample_spokes[i].unique_id
      hub_id     = google_network_connectivity_spoke.sample_spokes[i].hub
    }
  } : {}
}

output "routers_and_nats" {
  description = "Information about Cloud Routers and NAT gateways"
  value = var.create_sample_spokes ? {
    for i, config in var.sample_spoke_configs : config.name => {
      router_name = google_compute_router.spoke_routers[i].name
      router_id   = google_compute_router.spoke_routers[i].id
      nat_name    = google_compute_router_nat.spoke_nats[i].name
      region      = google_compute_router.spoke_routers[i].region
    }
  } : {}
}

output "firewall_rules" {
  description = "Information about created firewall rules"
  value = {
    inter_spoke_rules = var.create_sample_spokes ? {
      for i, config in var.sample_spoke_configs : config.name => {
        rule_name = google_compute_firewall.inter_spoke_allow[i].name
        rule_id   = google_compute_firewall.inter_spoke_allow[i].id
        network   = google_compute_firewall.inter_spoke_allow[i].network
      }
    } : {}
    
    custom_rules = {
      for i, rule in var.custom_firewall_rules : rule.name => {
        rule_name = google_compute_firewall.custom_rules[i].name
        rule_id   = google_compute_firewall.custom_rules[i].id
        network   = google_compute_firewall.custom_rules[i].network
        priority  = google_compute_firewall.custom_rules[i].priority
      }
    }
  }
}

output "iam_bindings" {
  description = "IAM bindings applied for NCC"
  value = {
    admin_members  = var.ncc_admin_members
    viewer_members = var.ncc_viewer_members
  }
}

output "enabled_apis" {
  description = "List of enabled APIs"
  value       = var.required_apis
}

output "monitoring_policy" {
  description = "Monitoring policy information"
  value = var.enable_monitoring ? {
    policy_name = google_monitoring_alert_policy.ncc_spoke_disconnected[0].display_name
    policy_id   = google_monitoring_alert_policy.ncc_spoke_disconnected[0].name
  } : null
}

output "network_configuration" {
  description = "Network configuration summary"
  value = {
    hub_name           = var.ncc_hub_name
    region             = var.region
    zone               = var.zone
    global_routing     = var.enable_global_routing
    private_google_access = var.enable_private_google_access
    nat_logging        = var.enable_nat_logging
    flow_logs_enabled  = var.enable_flow_logs
  }
}

output "security_configuration" {
  description = "Security configuration summary"
  value = {
    allowed_ip_ranges  = var.allowed_ip_ranges
    allowed_tcp_ports  = var.allowed_tcp_ports
    allowed_udp_ports  = var.allowed_udp_ports
    network_tags       = var.network_tags
    exclude_export_ranges = var.exclude_export_ranges
  }
}

output "spoke_connectivity_matrix" {
  description = "Matrix showing connectivity between spokes"
  value = {
    total_spokes = length(var.existing_spoke_networks) + (var.create_sample_spokes ? length(var.sample_spoke_configs) : 0)
    existing_spokes = var.existing_spoke_networks
    sample_spokes = var.create_sample_spokes ? [for config in var.sample_spoke_configs : config.name] : []
    connectivity_enabled = length(var.existing_spoke_networks) > 0 || var.create_sample_spokes
  }
}

output "resource_labels" {
  description = "Labels applied to resources"
  value = {
    hub_labels    = var.hub_labels
    spoke_labels  = var.spoke_labels
    resource_labels = var.resource_labels
  }
}

output "costs_and_usage" {
  description = "Information about costs and resource usage"
  value = {
    hub_created        = var.create_ncc_hub
    sample_spokes_count = var.create_sample_spokes ? length(var.sample_spoke_configs) : 0
    existing_spokes_count = length(var.existing_spoke_networks)
    nat_gateways_count = var.create_sample_spokes ? length(var.sample_spoke_configs) : 0
    monitoring_enabled = var.enable_monitoring
    flow_logs_enabled  = var.enable_flow_logs
  }
}
