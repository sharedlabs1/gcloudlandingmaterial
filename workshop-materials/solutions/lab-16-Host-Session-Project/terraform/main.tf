# main.tf for Lab 16: Host Session Project Implementation
# Generated by Copilot

terraform {
  required_version = ">= 1.0"
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "~> 4.0"
    }
  }
}

provider "google" {
  project = var.project_id
  region  = var.region
  zone    = var.zone
}

# Host Session Project
resource "google_project" "host_session_project" {
  count           = var.create_host_project ? 1 : 0
  name            = var.host_project_name
  project_id      = var.host_project_id
  billing_account = var.billing_account
  folder_id       = var.folder_id
}

# Enable required APIs for Host Session Project
resource "google_project_service" "host_session_apis" {
  count   = var.create_host_project ? length(var.required_apis) : 0
  project = var.create_host_project ? google_project.host_session_project[0].project_id : var.host_project_id
  service = var.required_apis[count.index]

  disable_dependent_services = true
  disable_on_destroy         = false
}

# Host Session VPC Network
resource "google_compute_network" "host_session_vpc" {
  name                    = var.host_session_vpc_name
  project                 = var.create_host_project ? google_project.host_session_project[0].project_id : var.host_project_id
  auto_create_subnetworks = false
  routing_mode           = "REGIONAL"

  depends_on = [google_project_service.host_session_apis]
}

# Host Session Subnet
resource "google_compute_subnetwork" "host_session_subnet" {
  name          = var.host_session_subnet_name
  project       = var.create_host_project ? google_project.host_session_project[0].project_id : var.host_project_id
  network       = google_compute_network.host_session_vpc.id
  ip_cidr_range = var.host_session_subnet_cidr
  region        = var.region

  # Enable private Google access
  private_ip_google_access = true

  # Secondary IP ranges for GKE if needed
  dynamic "secondary_ip_range" {
    for_each = var.secondary_ip_ranges
    content {
      range_name    = secondary_ip_range.value.range_name
      ip_cidr_range = secondary_ip_range.value.ip_cidr_range
    }
  }
}

# Firewall rules for host session management
resource "google_compute_firewall" "host_session_allow_ssh" {
  name    = "${var.host_session_vpc_name}-allow-ssh"
  project = var.create_host_project ? google_project.host_session_project[0].project_id : var.host_project_id
  network = google_compute_network.host_session_vpc.name

  allow {
    protocol = "tcp"
    ports    = ["22"]
  }

  source_ranges = var.ssh_source_ranges
  target_tags   = ["host-session"]
}

resource "google_compute_firewall" "host_session_allow_rdp" {
  name    = "${var.host_session_vpc_name}-allow-rdp"
  project = var.create_host_project ? google_project.host_session_project[0].project_id : var.host_project_id
  network = google_compute_network.host_session_vpc.name

  allow {
    protocol = "tcp"
    ports    = ["3389"]
  }

  source_ranges = var.rdp_source_ranges
  target_tags   = ["host-session-windows"]
}

resource "google_compute_firewall" "host_session_allow_internal" {
  name    = "${var.host_session_vpc_name}-allow-internal"
  project = var.create_host_project ? google_project.host_session_project[0].project_id : var.host_project_id
  network = google_compute_network.host_session_vpc.name

  allow {
    protocol = "tcp"
    ports    = ["0-65535"]
  }

  allow {
    protocol = "udp"
    ports    = ["0-65535"]
  }

  allow {
    protocol = "icmp"
  }

  source_ranges = [var.host_session_subnet_cidr]
}

# Cloud NAT Router for outbound internet access
resource "google_compute_router" "host_session_router" {
  name    = "${var.host_session_vpc_name}-router"
  project = var.create_host_project ? google_project.host_session_project[0].project_id : var.host_project_id
  region  = var.region
  network = google_compute_network.host_session_vpc.id
}

resource "google_compute_router_nat" "host_session_nat" {
  name                               = "${var.host_session_vpc_name}-nat"
  project                           = var.create_host_project ? google_project.host_session_project[0].project_id : var.host_project_id
  router                            = google_compute_router.host_session_router.name
  region                            = var.region
  nat_ip_allocate_option            = "AUTO_ONLY"
  source_subnetwork_ip_ranges_to_nat = "ALL_SUBNETWORKS_ALL_IP_RANGES"

  log_config {
    enable = true
    filter = "ERRORS_ONLY"
  }
}

# IAM bindings for host session project
resource "google_project_iam_binding" "host_session_admins" {
  count   = length(var.host_session_admin_members) > 0 ? 1 : 0
  project = var.create_host_project ? google_project.host_session_project[0].project_id : var.host_project_id
  role    = "roles/compute.admin"
  members = var.host_session_admin_members
}

resource "google_project_iam_binding" "host_session_users" {
  count   = length(var.host_session_user_members) > 0 ? 1 : 0
  project = var.create_host_project ? google_project.host_session_project[0].project_id : var.host_project_id
  role    = "roles/compute.instanceAdmin"
  members = var.host_session_user_members
}

# Example host session VM instance (optional)
resource "google_compute_instance" "host_session_vm" {
  count        = var.create_sample_vm ? 1 : 0
  name         = var.sample_vm_name
  project      = var.create_host_project ? google_project.host_session_project[0].project_id : var.host_project_id
  machine_type = var.sample_vm_machine_type
  zone         = var.zone

  boot_disk {
    initialize_params {
      image = var.sample_vm_image
      size  = var.sample_vm_disk_size
      type  = "pd-standard"
    }
  }

  network_interface {
    network    = google_compute_network.host_session_vpc.id
    subnetwork = google_compute_subnetwork.host_session_subnet.id
    # No external IP for security
  }

  tags = ["host-session"]

  metadata = {
    enable-oslogin = "TRUE"
  }

  service_account {
    email  = var.sample_vm_service_account_email
    scopes = ["cloud-platform"]
  }

  labels = {
    environment = "host-session"
    lab         = "lab-16"
  }
}
